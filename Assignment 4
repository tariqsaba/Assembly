- [ ] 4.2.8 Section Review, Questions 1, 2, 3, 4, 5, 6	
Use the following data for Questions 1-5:
.data
val1 BYTE 10h
val2 WORD 8000h
val3 DWORD 0FFFFh
val4 WORD 7FFFh

1. Write an instruction that increments val2.
inc val2
2. Write an instruction that subtracts val3 from EAX. 
sub eax,val3
3. Write instructions that subtract val4 from val2.
mov ax,val4
sub val2,ax
4. If val2 is incremented by 1 using the ADD instruction, what will be the values of the Carry
and Sign flags?
The carry flag would be 0 and the sign flag 1.

5. If val4 is incremented by 1 using the ADD instruction, what will be the values of the Over-
flow and Sign flags?
The overflow flag would be 1 and the sign flag 1;


6. Where indicated, write down the values of the Carry, Sign, Zero, and Overflow flags after
each instruction has executed:
mov ax,7FF0h
add al,10h ; a. CF =1 SF =0 ZF =1 OF =0
add ah,1 ; b. CF = 0SF =1 ZF =0 OF =1
add ax,2 ; c. CF =0 SF =1 ZF =0  OF =0

- [ ] 4.3.8 Section Review, Questions 1,2,3,4,5
1. (True/False): The OFFSET operator always returns a 16-bit value. False
2. (True/False): The PTR operator returns the 32-bit address of a variable. False
3. (True/False): The TYPE operator returns a value of 4 for doubleword operands. True
4. (True/False): The LENGTHOF operator returns the number of bytes in an operand.False
5. (True/False): The SIZEOF operator returns the number of bytes in an operand. True

- [ ] 4.4.5 Section Review, Questions 4,5
4. (True/False): The following is an indexed operand: array[esi]  -> True

Use the following data definitions for Questions 5 and 6:
myBytes BYTE 10h,20h,30h,40h
myWords WORD 8Ah,3Bh,72h,44h,66h
myDoubles DWORD 1,2,3,4,5
myPointer DWORD myDoubles

5. Fill in the requested register values on the right side of the following instruction sequence:
mov esi,OFFSET myBytes
mov al,[esi] ; a. AL = 10h
mov al,[esi+3] ; b. AL =40h
mov esi,OFFSET myWords + 2
mov ax,[esi] ; c. AX =3Bh
mov edi,8
mov edx,[myDoubles + edi] ; d. EDX = 3
mov edx,myDoubles[edi] ; e. EDX =3
mov ebx,myPointer
mov eax,[ebx+4] ; f. EAX = 2


- [ ] 4.10 Programming Exercises, Question 7 //
.386
.model flat,stdcall
.stack 4096
ExitProcess proto,dwExitCode:dword

.data
	source BYTE "This is the source string",0
	target BYTE SIZEOF source DUP('#')
.code
main proc

	mov ecx, SIZEOF source
	mov esi,0
		L1:
			mov al,source[ecx-1]
			mov target[esi], al
			add esi, TYPE source
		loop L1

	invoke ExitProcess,0
main endp
end main
