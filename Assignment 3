3.1.11 Section Review, Questions 1, 2, 3, 4

1. Using the value –35, write it as an integer literal in decimal, hexadecimal, octal, and binary
formats that are consistent with MASM syntax.
-35d, DDh, 335o, 11011101b
2. (Yes/No): Is A5h a valid hexadecimal literal? 
no
3. (Yes/No): Does the multiplication operator (*) have a higher precedence than the division
operator (/) in integer expressions? 
no
4. Create a single integer expression that uses all the operators from Section 3.1.2. Calculate
the value of the expression.3
(+3 - 2) / 2 * 2 MOD 7     = 2


- [done ] 3.2.4 Section Review, Questions 4, 5
4)In the AddTwo program, which register holds the sum?
eax
5)In the AddTwo program, which statement halts the program?
ExitProcess.


- [done ] 3.3.3 Section Review, Questions 1, 2, 3, 4
1. What types of files are produced by the assembler?
object Files
2. (True/False): The linker extracts assembled procedures from the link library and inserts
them in the executable program.
true
3. (True/False): When a program’s source code is modified, it must be assembled and linked
again before it can be executed with the changes.
True
4. Which operating system component reads and executes programs?
Loader

- [DONE ] 3.4.13 Section Review, Questions 1, 2, 3, 4, 5

1. Create an uninitialized data declaration for a 16-bit signed integer.
var1 SWORD
2. Create an uninitialized data declaration for an 8-bit unsigned integer.
var2 BYTE 
3. Create an uninitialized data declaration for an 8-bit signed integer.
var3 SBYTE
4. Create an uninitialized data declaration for a 64-bit integer.
var4 QWORD
5. Which data type can hold a 32-bit signed integer?
SDWORD

- [ ] 3.5.5 Section Review Question 3

Write a statement that causes the assembler to calculate the number of bytes in the follow-
ing array, and assign the value to a symbolic constant named ArraySize:
myArray WORD 20 DUP(?)
ArraySize = ($ - myArray) / 2


- [ ] 3.9.1 Short Answer, Questions 4, 5, 6, 25
4) because it uses a lot of lines of codes. 
5. Explain the difference between big endian and little endian. Also, look up the origins of this
term on the Web.
Big-endian and little-endian are terms that describe the order in which a sequence of bytes are stored in computer memory.
 Big-endian is an order in which the "big end" (most significant value in the sequence) is stored first (at the lowest storage address). 
Little-endian is an order in which the "little end" (least significant value in the sequence) is stored first.

6. Why might you use a symbolic constant rather than an integer literal in your code?
Symbolic constants provide more clarity than integer literals. They also have lesser code duplication and greater readability. 

25.Which data directive creates a 32-bit signed integer variable?
SDWORD. 
- [ ] 3.9.2 Algorithm Workbench, Questions 4, 7, 13
4)Find out if you can declare a variable of type DWORD and assign it a negative
value. What does this tell you about the assembler’s type checking?
The assembler allows you to assign DWORD a negative value. This shows that the type checking is not very restrictive at all
which is typical of assembly having less strict rules for what can be done.

7)Declare an array of 120 uninitialized unsigned doubleword values.
myArray DWORD 120 DUP(?) 
13)
myTestString BYTE 500 DUP("TEST").


- [ ] 3.10 Programming Exercises, Pick any 1 exercise

Programming Exercise #1


.386
.model flat,stdcall
.stack 4096
ExitProcess PROTO,dwExitCode:DWORD
.code
main PROC
	mov eax,5    ;A
	mov ebx,6    ;B
	mov ecx,1    ;C
	mov edx,2    ;D
	add eax,ebx    ;(A+B) 
	add ecx,edx    ;(C+D)
	sub eax,ecx    ;A = (A+B) - (C+D)
	INVOKE ExitProcess,0
main ENDP
END main

